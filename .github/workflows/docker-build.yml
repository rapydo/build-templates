name: Build

on:
  push:
  # schedule:
  #   - cron: "0 0 * * *"
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-20.04
    timeout-minutes: 8

    env:
      RAPYDO_VERSION: "2.1"

    strategy:
      matrix:
        service:
          [
            backend,
            angular,
            angular-test,
            proxy,
            neo4j,
            rabbitmq,
            postgres,
            mongodb,
            ftp,
            adminer,
            swaggerui,
            registry,
            controller,
            fail2ban,
          ]

    steps:
      - uses: actions/checkout@v2
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      - name: Build the Docker image
        run: |
          docker buildx version
          docker buildx build \
            --tag rapydo/${{ matrix.service }}:${RAPYDO_VERSION} \
            --build-arg CURRENT_UID=1000 \
            --build-arg CURRENT_GID=1000 \
            --build-arg RAPYDO_VERSION=${RAPYDO_VERSION} \
            --push \
            ${{ matrix.service }}

      - name: Test Fail2ban
        if: ${{ matrix.service == 'fail2ban' }}
        run: |
          docker run --rm -d --name fail2ban --network host --cap-add NET_ADMIN --cap-add NET_RAW rapydo/${{ matrix.service }}:${RAPYDO_VERSION}

          ipt=$(docker exec fail2ban iptables -L)
          echo $ipt
          echo $ipt | grep --color "DOCKER-USER"

          git clone -b ${RAPYDO_VERSION} https://github.com/rapydo/do.git

          docker cp fail2ban/tests/testbed.syslog fail2ban:/tmp/
          docker cp do/controller/confs/fail2ban fail2ban:/tmp/

          docker exec fail2ban fail2ban-regex /tmp/testbed.syslog /tmp/fail2ban/filters/nginx.conf --print-all-matched > /tmp/nginx.matched
          docker exec fail2ban fail2ban-regex /tmp/testbed.syslog /tmp/fail2ban/filters/nginx.conf --print-all-missed > /tmp/nginx.missed

          cat fail2ban/tests/expected.matches | while read url
          do
            echo "grep -F \"${url}\" /tmp/nginx.matched";
            if ! grep -F "${url}" /tmp/nginx.matched;
            then
              echo "Invalid result, this URL was expected to match: ${url}";
              exit 1
            fi
          done

          cat fail2ban/tests/expected.missed | while read url
          do
            echo "grep -F \"${url}\" /tmp/nginx.missed";
            if ! grep -F "${url}" /tmp/nginx.missed;
            then
              echo "Invalid result, this URL was expected to be missed: ${url}";
              exit 1
            fi
          done
