name: Build

on:
  push:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-20.04
    timeout-minutes: 8

    env:
      RAPYDO_VERSION: "2.2"

    strategy:
      matrix:
        service:
          [
            backend,
            angular,
            angular-test,
            proxy,
            neo4j,
            rabbitmq,
            postgres,
            mongodb,
            ftp,
            adminer,
            swaggerui,
            registry,
            controller,
            fail2ban,
          ]

    steps:
      - uses: actions/checkout@v2
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      - name: Build the Docker image
        run: |
          docker buildx version
          docker buildx build \
            --tag rapydo/${{ matrix.service }}:${RAPYDO_VERSION} \
            --build-arg CURRENT_UID=1000 \
            --build-arg CURRENT_GID=1000 \
            --build-arg RAPYDO_VERSION=${RAPYDO_VERSION} \
            --push \
            ${{ matrix.service }}

      - name: Test fail2ban
        if: ${{ matrix.service == 'fail2ban' }}
        run: |
          docker run --rm -d --name fail2ban --network host --cap-add NET_ADMIN --cap-add NET_RAW rapydo/${{ matrix.service }}:${RAPYDO_VERSION}

          ipt=$(docker exec fail2ban iptables -L)
          echo $ipt
          echo $ipt | grep --color "DOCKER-USER"

          git clone -b ${RAPYDO_VERSION} https://github.com/rapydo/do.git

          docker cp fail2ban/tests/testbed.syslog fail2ban:/tmp/
          docker cp do/controller/confs/fail2ban fail2ban:/tmp/

          docker exec fail2ban fail2ban-regex /tmp/testbed.syslog /tmp/fail2ban/filters/nginx.conf --print-all-matched > /tmp/nginx.matched
          docker exec fail2ban fail2ban-regex /tmp/testbed.syslog /tmp/fail2ban/filters/nginx.conf --print-all-missed > /tmp/nginx.missed

          # Verify that all rules have matches on the testbed
          EXPECTED_RULES=$(grep -E "^\s+\^%\(prefix\)s<HOST>" do/controller/confs/fail2ban/filters/nginx.conf  | wc -l)
          echo "Expected ${EXPECTED_RULES} rules in nginx.conf"

          for i in $(seq 1 ${EXPECTED_RULES}); do
            if ! grep -F "  ${i}) [" /tmp/nginx.matched;
            then
              echo "No matches found for rule ${i}";
              exit 1
            fi
          done

          A=$(expr $EXPECTED_RULES + 1)
          B=$(expr $EXPECTED_RULES + 100)
          for i in $(seq ${A} ${B}); do
            if grep -F "  ${i}) [" /tmp/nginx.missed;
            then
              echo "No matches expected to be found for rule ${i}";
              exit 1
            fi
          done

          cat fail2ban/tests/testbed.blacklist | while read url
          do
            echo "grep -F \"${url}\" /tmp/nginx.matched";
            if ! grep -F "${url}" /tmp/nginx.matched;
            then
              echo "Invalid result, this URL was expected to match: ${url}";
              exit 1
            fi
          done

          cat fail2ban/tests/testbed.whitelist | while read url
          do
            echo "grep -F \"${url}\" /tmp/nginx.missed";
            if ! grep -F "${url}" /tmp/nginx.missed;
            then
              echo "Invalid result, this URL was expected to be missed: ${url}";
              exit 1
            fi
          done

      - name: Set up Python
        if: ${{ matrix.service != 'fail2ban' }}
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: Install RAPyDo
        if: ${{ matrix.service != 'fail2ban' }}
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade --no-cache-dir git+https://github.com/rapydo/do.git@${RAPYDO_VERSION}
          rapydo --version

          mkdir test-${{ matrix.service }}
          rapydo install compose

      - name: Test backend
        if: ${{ matrix.service == 'backend'}}
        run: |
          cd test-${{ matrix.service }}
          rapydo create prj --auth no --frontend no --current --origin-url https://your_remote_git/your_project.git
          rapydo init
          rapydo start backend

          # Expected startup time: ~ 2 seconds

          sleep 1
          if rapydo logs backend | grep "xxxxxx";
          then
            echo "Was not expected to have started yet";
            exit 1
          fi

          sleep 1
          rapydo logs backend
          echo -e "\nBackend is expected to have completed the startup\n";
          rapydo logs backend | grep "xxxxx"

      - name: Test angular
        if: ${{ matrix.service == 'angular'}}
        run: |
          cd test-${{ matrix.service }}
          rapydo create prj --auth no --frontend angular --current --origin-url https://your_remote_git/your_project.git
          rapydo init
          rapydo start frontend

          # Expected startup time: ~ 20 seconds

          sleep 10
          if rapydo logs frontend | grep "xxxxxx";
          then
            echo "Was not expected to have started yet";
            exit 1
          fi

          sleep 10
          rapydo logs frontend
          echo -e "\nAngular is expected to have completed the startup\n";
          rapydo logs frontend | grep "xxxxx"

      - name: Test angular-test
        if: ${{ matrix.service == 'angular-test'}}
        run: |
          cd test-${{ matrix.service }}
          rapydo create prj --auth no --frontend angular --current --origin-url https://your_remote_git/your_project.git
          rapydo -e FRONTEND_BUILD_MODE=angular-test init
          rapydo start frontend

          # Expected startup time: ~ 20 seconds

          sleep 10
          if rapydo logs frontend | grep "xxxxxx";
          then
            echo "Was not expected to have started yet";
            exit 1
          fi

          sleep 10
          rapydo logs frontend
          echo -e "\nAngular is expected to have completed the startup\n";
          rapydo logs frontend | grep "xxxxx"

      - name: Test proxy
        if: ${{ matrix.service == 'proxy'}}
        run: |
          cd test-${{ matrix.service }}
          rapydo create prj --auth no --frontend no --current --origin-url https://your_remote_git/your_project.git
          rapydo --prod init
          rapydo start proxy

          # Expected startup time: ~ 2 seconds

          sleep 1
          if rapydo logs proxy | grep "xxxxxx";
          then
            echo "Was not expected to have started yet";
            exit 1
          fi

          sleep 1
          rapydo logs proxy
          echo -e "\nnginx is expected to have completed the startup\n";
          rapydo logs proxy | grep "xxxxx"

      - name: Test neo4j
        if: ${{ matrix.service == 'neo4j'}}
        run: |
          cd test-${{ matrix.service }}
          rapydo create prj --auth neo4j --frontend no --current --origin-url https://your_remote_git/your_project.git
          rapydo init
          rapydo start neo4j

          # Expected startup time: ~ 10 seconds

          sleep 5
          if rapydo logs neo4j | grep "Remote interface available at http";
          then
            echo "Was not expected to have started yet";
            exit 1
          fi

          sleep 5
          rapydo logs neo4j
          echo -e "\nNeo4j is expected to have completed the startup\n";
          rapydo logs neo4j | grep "Remote interface available at http"

      - name: Test rabbitmq
        if: ${{ matrix.service == 'rabbitmq'}}
        run: |
          cd test-${{ matrix.service }}
          rapydo create prj --auth no --frontend no -s rabbit --current --origin-url https://your_remote_git/your_project.git
          rapydo init
          rapydo start rabbit

          # Expected startup time: ~ 10 seconds

          sleep 5
          if rapydo logs rabbit | grep "Server startup complete;";
          then
            echo "Was not expected to have started yet";
            exit 1
          fi

          sleep 5
          rapydo logs rabbit
          echo -e "\nRabbitMQ is expected to have completed the startup\n";
          rapydo logs rabbit | grep "Server startup complete;"
      - name: Test postgres
        if: ${{ matrix.service == 'postgres'}}
        run: |
          cd test-${{ matrix.service }}
          rapydo create prj --auth postgres --frontend no --current --origin-url https://your_remote_git/your_project.git
          rapydo init
          rapydo start postgres

          cd test-${{ matrix.service }}
          rapydo create prj --auth no --frontend no -s rabbit --current --origin-url https://your_remote_git/your_project.git
          rapydo init
          rapydo start rabbit

          # Expected startup time: ~ 2 seconds

          sleep 1
          if rapydo logs postgres | grep "xxxxxx";
          then
            echo "Was not expected to have started yet";
            exit 1
          fi

          sleep 1
          rapydo logs postgres
          echo -e "\nPostgres is expected to have completed the startup\n";
          rapydo logs postgres | grep "xxxxx"

      - name: Test mongodb
        if: ${{ matrix.service == 'mongodb'}}
        run: |
          cd test-${{ matrix.service }}
          rapydo create prj --auth mongo --frontend no --current --origin-url https://your_remote_git/your_project.git
          rapydo init
          rapydo start mongodb

          # Expected startup time: ~ 2 seconds

          sleep 1
          if rapydo logs mongodb | grep "xxxxxx";
          then
            echo "Was not expected to have started yet";
            exit 1
          fi

          sleep 1
          rapydo logs mongodb
          echo -e "\nMongodb is expected to have completed the startup\n";
          rapydo logs mongodb | grep "xxxxx"

      - name: Test ftp
        if: ${{ matrix.service == 'ftp'}}
        run: |
          cd test-${{ matrix.service }}
          rapydo create prj --auth no --frontend no -s ftp --current --origin-url https://your_remote_git/your_project.git
          rapydo init
          rapydo start ftp

          # Expected startup time: ~ 1 second, no message is shown at startup completion...

          sleep 1
          rapydo logs ftp
          echo -e "\nPure-FTP is expected to have completed the startup\n";
          rapydo logs ftp | grep "Starting Pure-FTPd"

      - name: Test adminer
        if: ${{ matrix.service == 'adminer'}}
        run: |
          cd test-${{ matrix.service }}
          rapydo create prj --auth no --frontend no --current --origin-url https://your_remote_git/your_project.git
          rapydo init
          rapydo run adminer --detach

          # Expected startup time: ~ 2 seconds

          sleep 1
          if docker logs adminer 2>&1 | grep "Development Server .* started";
          then
            echo "Was not expected to have started yet";
            exit 1
          fi

          sleep 1
          docker logs adminer
          echo -e "\nAdminer is expected to have completed the startup\n";
          docker logs adminer 2>&1 | grep "Development Server .* started"
      - name: Test swaggerui
        if: ${{ matrix.service == 'swaggerui'}}
        run: |
          cd test-${{ matrix.service }}
          rapydo create prj --auth no --frontend no --current --origin-url https://your_remote_git/your_project.git
          rapydo init
          rapydo run swaggerui --detach

          # Expected startup time: < 1 second

          sleep 1

          curl http://localhost:7777
          curl http://localhost:7777 | grep "Swagger UI"

          docker logs swaggerui
          echo -e "\nSwaggerUI is expected to have completed the startup\n";
          docker logs swaggerui 2>&1 | grep "GET / HTTP/.*\" 200"
      - name: Test registry
        if: ${{ matrix.service == 'registry'}}
        run: |
          export SWARM_MODE=1
          cd test-${{ matrix.service }}
          rapydo create prj --auth no --frontend no --current --origin-url https://your_remote_git/your_project.git
          rapydo init
          rapydo run registry

          # Expected startup time: < 1 second

          sleep 1
          docker logs registry
          echo -e "\nDocker Registry is expected to have completed the startup\n";
          docker logs registry 2>&1 | grep "debug server listening localhost"
      # - name: Test controller
      #   if: ${{ matrix.service == 'controller'}}
      #   run: |
      #     ...
