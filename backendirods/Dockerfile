FROM ubuntu:20.04

ARG RAPYDO_VERSION
RUN test -n "$RAPYDO_VERSION"
ARG CURRENT_UID
RUN test -n "$CURRENT_UID"
ARG CURRENT_GID
RUN test -n "$CURRENT_GID"

ENV MYPYTHON_VERSION 3.8
## for apt to be noninteractive
ENV DEBIAN_FRONTEND noninteractive
ENV DEBCONF_NONINTERACTIVE_SEEN true

## preesed tzdata, update package index, upgrade packages and install needed software
RUN echo "tzdata tzdata/Areas select Etc" > /tmp/preseed.txt; \
    echo "tzdata tzdata/Zones/Europe select UTC" >> /tmp/preseed.txt; \
    debconf-set-selections /tmp/preseed.txt \
    && apt-get update \
    && apt-get install -y --no-install-recommends \
    bash less vim curl wget telnet iputils-ping file git jq gosu build-essential \
    libkrb5-dev \
    python${MYPYTHON_VERSION} \
    python${MYPYTHON_VERSION}-dev \
    python${MYPYTHON_VERSION}-gdbm \
    python3-setuptools python3-pip python3-distutils \
    libglobus-gssapi-gsi-dev libssl-dev libffi-dev \
    globus-proxy-utils \
    && apt-get autoremove --yes && apt-get clean && rm -rf /var/lib/apt/lists/*

# Latest requests-oauthlib [1.2.0] (required by Flask-OAuthlib)
# requires oauthlib<3.0.0,>=2.1.0
# Version 1.2.0 depends on OAuthlib 3.0.0 and above
# It does not support versions of OAuthlib before 3.0.0
# But Flask-OAuthlib depe nds from OAuthlib < 3.0.0
# gdapi-python == Python client for Rancher APIs
RUN pip3 install --upgrade --no-cache-dir pip==20.1.1 dumb-init==1.2.2 meinheld==1.0.2 gunicorn==20.0.4 oauthlib==2.1.0 Werkzeug==0.16.1 requests-oauthlib==1.1.0 Flask-OAuthlib==0.9.5 authlib==0.14.1 git+https://github.com/EUDAT-B2STAGE/B2HANDLE.git@master git+https://github.com/irods/python-irodsclient.git@master gdapi-python==0.5.3 gssapi==1.5.1 git+https://github.com/rapydo/http-api.git@$RAPYDO_VERSION

###################
# Adding gsi as gssapi available mechanism for RPC
COPY gsi.conf /etc/gss/mech.d/
# main user for launching the apis
ENV APIUSER developer
#Â Emulating irods user creation. See http://j.mp/2lGPqlq

RUN useradd \
    -r -M -d /home/$APIUSER -s /bin/bash -p ! \
    --uid $CURRENT_UID $APIUSER \
    && groupmod -og $CURRENT_GID $APIUSER \
    && mkdir -p /home/$APIUSER \
    && chown $CURRENT_UID:$CURRENT_GID /home/$APIUSER

# GUNICORN
ENV GUNICORN_CONF /tmp/gunicorn_conf.py
COPY gunicorn_conf.py ${GUNICORN_CONF}
COPY launch_gunicorn.sh /usr/local/bin/mygunicorn

# UTILITIES
COPY flask_migrate /usr/local/bin/flask_migrate 

RUN chmod +x /usr/local/bin/mygunicorn /usr/local/bin/flask_migrate

ENV PAGER less
ENV TERM=xterm-256color
ENV LC_ALL C.UTF-8
ENV LANG C.UTF-8
ENV PYTHONIOENCODING="utf-8"
ENV FLASK_PORT 8080
ENV JWT_APP_SECRETS /jwts
ENV CODE_DIR /code
ENV CERTDIR /opt/certificates
ENV PYTHONPATH $CODE_DIR
EXPOSE $FLASK_PORT

#### Make the terminal prettier ####
# generated with http://bashrcgenerator.com/
RUN echo 'export PS1="\\[\\033[38;5;11m\\]\\u\\[$(tput sgr0)\\]\\[\\033[38;5;15m\\]@\\h:\\[$(tput sgr0)\\]\\[\\033[38;5;6m\\][\\w]:\\[$(tput sgr0)\\]\\[\\033[38;5;15m\\] \\[$(tput sgr0)\\]"' >> /etc/bash.bashrc

# closing entrypoint

RUN mkdir $CODE_DIR /docker-entrypoint.d/
COPY ./docker-entrypoint.sh /usr/local/bin/docker-entrypoint
COPY ./docker-entrypoint-celery.sh /usr/local/bin/docker-entrypoint-celery

WORKDIR $CODE_DIR
ENTRYPOINT ["/usr/local/bin/dumb-init", "--"]
CMD ["docker-entrypoint", "rest"]

# TODO: verify if better using tini for entrypoint
# https://github.com/krallin/tini-images
